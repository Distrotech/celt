{"name":"Celt","tagline":"Mirror of git://git.xiph.org/celt.git","body":"CELT is a very low delay audio codec designed for high-quality communications.\r\n\r\nTraditional full-bandwidth  codecs such as Vorbis and AAC can offer high\r\nquality but they require codec delays of hundreds of milliseconds, which\r\nmakes them unsuitable  for real-time interactive applications like tele-\r\nconferencing. Speech targeted codecs, such as Speex or G.722, have lower\r\n20-40ms delays but their speech focus and limited sampling rates \r\nrestricts their quality, especially for music.\r\n\r\nAdditionally, the other mandatory components of a full network audio system—\r\naudio interfaces, routers, jitter buffers— each add their own delay. For lower\r\nspeed networks the time it takes to serialize a  packet onto the network cable\r\ntakes considerable time, and over the long distances the speed of light\r\nimposes a significant delay.\r\n\r\nIn teleconferencing— it is important to keep delay low so that the participants\r\ncan communicate fluidly without talking on top of each  other and so that their\r\nown voices don't return after a round trip as an annoying echo.\r\n\r\nFor network music performance— research has show that the total one way delay\r\nmust be kept under 25ms to avoid degrading the musicians performance. \r\n\r\nSince many of the sources of delay in a complete system are outside of the\r\nuser's control (such as the  speed of light) it is often  only possible to\r\nreduce the total delay by reducing the codec delay. \r\n\r\nLow delay has traditionally been considered a challenging area in audio codec\r\ndesign, because as a codec is forced to work on the smaller chunks of audio\r\nrequired for low delay it has access to less redundancy and less perceptual\r\ninformation which it can use to reduce the size of the transmitted audio.\r\n\r\nCELT is designed to bridge the gap between \"music\" and \"speech\" codecs,\r\npermitting new very high quality teleconferencing applications, and to go\r\nfurther, permitting latencies much lower than speech codecs normally provide\r\nto enable applications such as remote musical collaboration even over long\r\ndistances.  \r\n\r\nIn keeping with the Xiph.Org mission—  CELT is also designed to accomplish\r\nthis without copyright or patent encumbrance. Only by keeping the formats\r\nthat drive our Internet communication free and unencumbered can we maximize\r\ninnovation, collaboration, and interoperability.  Fortunately, CELT is ahead\r\nof the adoption curve in its target application space, so there should be \r\nno reason for someone who needs what CELT provides to go with a proprietary\r\ncodec.\r\n\r\nCELT has been tested on x86, x86_64, ARM, and the TI C55x DSPs, and should\r\nbe portable to any platform with a working C compiler and on the order of\r\n100 MIPS of processing power. \r\n\r\nThe code is still in early stage, so it may be broken from time to time, and\r\nthe bit-stream is not frozen yet, so it is different from one version to \r\nanother. Oh, and don't complain if it sets your house on fire.\r\n\r\nComplaints and accolades can be directed to the CELT mailing list:\r\nhttp://lists.xiph.org/mailman/listinfo/celt-dev/\r\n\r\nTo compile:\r\n% ./configure\r\n% make\r\n\r\nFor platforms without fast floating point support (such as ARM) use the\r\n--enable-fixed argument to configure to build a fixed-point version of CELT.\r\n\r\nThere are Ogg-based encode/decode tools in tools/. These are quite similar to\r\nthe speexenc/speexdec tools. Use the --help option for details.\r\n\r\nThere is also a basic tool for testing the encoder and decoder called\r\n\"testcelt\" located in libcelt/: \r\n\r\n% testcelt <rate> <channels> <frame size> <bytes per packet> input.sw output.sw\r\n\r\nwhere input.sw is a 16-bit (machine endian) audio file sampled at 32000 Hz to \r\n96000 Hz. The output file is already decompressed.  \r\n\r\nFor example, for a 44.1 kHz mono stream at ~64kbit/sec and with 256 sample\r\nframes:\r\n\r\n% testcelt 44100 1 256 46 intput.sw output.sw \r\n\r\nSince 44100/256*46*8 = 63393.74 bits/sec.\r\n\r\nAll even frame sizes from 64 to 512 are currently supported, although\r\npower-of-two sizes are recommended  and most CELT development is done\r\nusing a size of 256.  The delay imposed by CELT is  1.25x - 1.5x  the \r\nframe duration depending on the frame size and some details of CELT's\r\ninternal operation.  For 256 sample frames the delay is 1.5x  or  384\r\nsamples, so the total codec delay in the above example is 8.70ms \r\n(1000/(44100/384)).   \r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}